package uk.ac.abdn.csd.stereos.util.reporters;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import uk.ac.abdn.csd.stereos.Experiment;
import uk.ac.abdn.csd.stereos.agents.Agent;
import uk.ac.abdn.csd.stereos.trust.sl.Opinion;

/**
 * A reporter which produces a file containing the final opinion spaces of each agent
 * @author Chris Burnett
 *
 */
public class ExampleOpinionsReporter implements Reporter {

	/**
	 * String that will be appended to the output filename
	 */
	public static final String id = "ops";

	// directory to write to
	private File dir;
	
	public ExampleOpinionsReporter(File expsDir)
	{
		dir = expsDir;
	}
	
	public void writeReport(Experiment[] e) throws IOException {
		System.out.print("Writing final opinion spaces...");
		String profile = e[0].getProfileName();

		// loop through experiments writing a new file for each
		for(Experiment exp : e)
		{
			if(!(exp.getCondition() == Experiment.NT))
			{
				// a structure mapping agents to an integer matrix index
				Map<Agent,Integer> agentIndices = new HashMap<Agent,Integer>();
				List<Agent> agents = exp.getAgents();
				int agentCount = exp.getAgentCount();
				int i=0;
				// setup the agent index map. Agents can now be mapped to an
				// integer array index.
				for(Agent a : agents)
					agentIndices.put(a, i++);
				System.out.println("1");
				// create a file for this condition's results
				PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(new File(dir, profile+"-"+"c"+exp.getCondition()+"-"+id+".csv"))));

				// create a new matrix
				Opinion[][] opinionMatrix = new Opinion[agentCount][agentCount];
				
				// for each agent in the experiment
				for(Agent a : agents)
				{
					// and for each possible partner...
					for(Agent b : agents)
					{
						// get the opinion, if there is one
						Opinion op = a.getTrustModel().opinionQuery(b);
						// put the opinion in the appropriate (hopefully..) cell
						opinionMatrix[agentIndices.get(a)][agentIndices.get(b)] = op;
					}
				}
				System.out.println("2");

				// now, write the matrix to a text file.
				// commas will separate cells, newlines lines
				for(Opinion[] row : opinionMatrix)
				{
					System.out.println("2.5");

					for(Opinion op : row)
					{
						out.append(op.toString() + ",");
						System.out.println("2.7");

					}
					out.append("\n");
				}

				System.out.println("3");

				out.close();
			}
		}
		System.out.print("...completed.\n");
	}
}
